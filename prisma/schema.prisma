// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  fullname    String 
  email       String @unique
  password    String
  googleId    String?
  image       String?
  role        String? @default("user")
  notifications Notification[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Notification {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  message     String
  type        String
  isRead      Boolean
  user        User @relation(fields: [userId] , references: [id] , onDelete:Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 }
model Employee {
    id                   String @id @default(auto()) @map("_id") @db.ObjectId
    employeeId           String @unique
    name                 String
    email                String @unique
    gender               String
    mobile_number        String
    aadhaar_number       String
    account_number       String
    department           String
    designation          String
    previous_company     String?
    pf_number            String?
    salary               String
    current_address      String
    permanent_address    String
    employeeDOBDate      DateTime
    employeeJoiningDate  DateTime
    employeePassword     String
    reportOffice         String? @default("Ahmedabad")
    active               Boolean
    totalLeaves          Float? @default(0)
    allottedLeaves       Float? @default(18)
    sickLeaves           Float? @default(0)
    casualLeaves         Float? @default(0)
    vacationLeaves       Float? @default(0)
    overtimeDays         Float? @default(0)
    imageUrl             String?
    bondType             String?
    requests             Request[]
    overtimes            Overtime[]
    leaveChangeLogs      LeaveChangeLog[]
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
}

model Request {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  employeeId         String
  name               String
  email              String
  designation        String
  date               DateTime?
  description        String
  leave              Float
  leaveType          String
  leaveDates         Json?
  requestStatus      String @default("pending")
  isRequestApproved  Boolean?
  employee           Employee @relation(fields: [employeeId] , references: [employeeId] , onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
model Overtime {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  employeeId         String
  name               String
  email              String
  designation        String
  date               DateTime?
  description        String
  overtimeDates       Json
  overtimeDays       Float
  requestStatus      String @default("pending")
  isRequestApproved  Boolean?
  employee           Employee @relation(fields: [employeeId] , references: [employeeId] , onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model LeaveChangeLog {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  employeeId         String
  oldLeaves          Float
  newLeaves          Float
  employee           Employee @relation(fields:[employeeId] , references:[id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}


